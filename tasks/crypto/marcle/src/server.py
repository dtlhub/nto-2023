from bitstring import Bits
from Crypto.Util.Padding import pad
from os import urandom

from flag import FLAG  # flag is on server :3


S_BOX = (
    (0x9, 0x6, 0x3, 0x2, 0x8, 0xB, 0x1, 0x7, 0xA, 0x4, 0xE, 0xF, 0xC, 0x0, 0xD, 0x5),
    (0x3, 0x7, 0xE, 0x9, 0x8, 0xA, 0xF, 0x0, 0x5, 0x2, 0x6, 0xC, 0xB, 0x4, 0xD, 0x1),
    (0xE, 0x4, 0x6, 0x2, 0xB, 0x3, 0xD, 0x8, 0xC, 0xF, 0x5, 0xA, 0x0, 0x7, 0x1, 0x9),
    (0xE, 0x7, 0xA, 0xC, 0xD, 0x1, 0x3, 0x9, 0x0, 0x2, 0xB, 0x4, 0xF, 0x8, 0x5, 0x6),
    (0xB, 0x5, 0x1, 0x9, 0x8, 0xD, 0xF, 0x0, 0xE, 0x4, 0x2, 0x3, 0xC, 0x7, 0xA, 0x6),
    (0x3, 0xA, 0xD, 0xC, 0x1, 0x2, 0x0, 0xB, 0x7, 0x5, 0x9, 0x4, 0x8, 0xF, 0xE, 0x6),
    (0x1, 0xD, 0x2, 0x9, 0x7, 0xA, 0x6, 0x0, 0x8, 0xC, 0x4, 0x5, 0xF, 0x3, 0xB, 0xE),
    (0xB, 0xA, 0xF, 0x5, 0x0, 0xC, 0xE, 0x8, 0x6, 0x2, 0x3, 0x9, 0x1, 0x7, 0xD, 0x4)
)

S_BOX = tuple(tuple(map(lambda x: Bits(bytes([x]))[-4:], t)) for t in S_BOX)

def round_key(key):
    key = Bits(key)
    blocks = [key[i: i+32] for i in range(0, len(key), 32)]

    for i in range(24):
        yield i % 8, blocks[i % 8]
    
    for i in range(8):
        yield i % 8, blocks[-((i + 1) % 8)]


def f(a, x, i):
    r = Bits()
    t = a ^ x
    for j in range(0, len(t), 4):
        r += S_BOX[i][int((t[j: j+4]).bin, 2)]
    return r[11:] + r[:11]


def encrypt(message, key):
    assert len(message) % 8 == 0
    assert len(key) == 32
    
    res = Bits()
    message = Bits(message)
    for i in range(0, len(message), 64):
        m = message[i:i+64]
        a, b = m[:32], m[32:]
        for r, k in round_key(key):
            a, b = b ^ f(a, k, r), a
        res += a + b
    return res


print(f"flag length: {len(FLAG)}")
KEY = urandom(32)
while True:
    try:
        data = bytes.fromhex(input())
        ciphertext = encrypt(pad(data + FLAG, 8), KEY)
        print(ciphertext.hex)
    except:
        print("Bad format")
        continue
